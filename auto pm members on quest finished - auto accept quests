// This script is meant to do two things: 
//
// 1. notice, when a quest is finished. In this case, a PM is sent to all party members in "toUserIds" (please make sure, every recipient wants to receive automated PMs.) 
// 2. notice, when a new invitation for a quest is online and instantly accept the quest invitation. 
//
// Requirements for this script to work are:  
// (1) to set up a webhook-server: 
//     - script.google.com offers an easy way to do this:
//     - open script.google.com in a web-browser. 
//     - create a new project (this will happen automatically if this is your fist google script) 
//     - paste this code snippet into the google script. 
//     - save this script as a new version. Read here: https://developers.google.com/apps-script/guides/web
//     - deploy the script as a web-app. Read here, also: https://developers.google.com/apps-script/guides/web
//     - ! execute the script as "yourself"
//     - ! grant acces to everyone, even anonymous. 
//           (please evaluate for youself about security issues.) 
//           (You might want to use a bot-character for this)
//           (Auto accept quest invitation cannot work if using a bot character)
//     - click "accept". In the following screen: copy the url-snippet (ending with "exec"). This is your webook-url! You need this for step 2!
//     - done
//     - each time you edit the script, it has to be saved as a new version and the new version has to be deployes as a web-app again. 
//
// (2) to set up a Habitica-Webhook: 
//     - To set up a webhook, you can use the tool: API-Helper on github: https://github.com/PitiTheGrey/Habitica-Api-Helper
//     - The webhook has to be set up as "questActivity" and has to have webhook-options set to the following criteria: 
//         - for noticing, when a quest has finished, webhook-option "questFinished" has to be set to true. (true has to be coded as boolean without double-quotes). 
//         - for noticing, when a quest invitation in online, the webhook-option "questInvited" has to be set to true.  
//         - provide the url-snippet of the google-apps-script from (1) as url (ends with "exec")
//         - click "create"
//         - click "display" to check if options are set correctly (copy and paste id if you'd like to delete the webhook. 
//         - done
//       

// https://script.google.com/macros/s/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/exec

function doPost(e) {
  var now = new Date();
  var habId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"; // your Habitica UserId
  var habToken = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"; // your Habitica API-Token (don't share, = password!)
  var partyId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"; // your PartyId 
  var message = "The quest is over. You might start a new quest";
  var toUserIds = ["xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",   
                    "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", 
                    "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                    "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                    "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"]; // userIds of the recipients of the pm

  
  // for getting info about what is happening, it might be helpful do have a google sheet that displays some data
  // the google sheet can be addressed by SpreadsheetApp.openByUrl (like below) of by SpreadsheetApp.openById. 
  
  var ss= SpreadsheetApp.openByUrl("https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/edit?usp=sharing");
  var sheet = ss.getSheetByName("Log");
  sheet.insertRows(2, 1); //shift all rows down by one from row 3
  sheet.getRange(2, 1).setValue(now);

//   
try {   
  var dataContents = JSON.parse(e.postData.contents); // [object]; get rid of backslashes in e.postData.contents-object  // e.postData.contents has to be parsed!!!
  var type = dataContents.type;
  if (type == "questFinished") {
      var quest = dataContents.quest.key; 
      sheet.getRange(2, 4).setValue(quest);
      } 
  var user = dataContents.user._id; 
  sheet.getRange(2, 3).setValue(type);
  sheet.getRange(2, 5).setValue(user); 
  } 
  
catch (err) {
  sheet.getRange(2, 2).setValue("error: " + JSON.stringify(err));
  }
  
  
  if (type == "questFinished") {
    sheet.getRange(2, 2).setValue("quest finished"); 
    for (var i = 0; i < toUserIds.length; i++) {
      sheet.getRange(2, i + 8).setValue(toUserIds[i]); 
      var data = {"message" : message, "toUserId" : toUserIds[i]};
      var paramsTemplate = {
        "contentType": "application/json",
        "payload" : JSON.stringify(data),
        "method" : "post", 
        "headers" : {
          "x-api-client" : habId + "-Webhook Script questFinished",
          "x-api-user" : habId, 
          "x-api-key" : habToken
        }
      }
      var params = paramsTemplate;
      UrlFetchApp.fetch("https://habitica.com/api/v3/members/send-private-message", params);
      Utilities.sleep(1000);
    }  
  }
  
  if (type == 'questInvited') {
    sheet.getRange(2, 2).setValue("quest invited"); 
    var paramsTemplate = {
      "contentType": "application/json", 
      "method": "post", 
      "headers" : {
        "x-api-client" : habId + "-Webhook Script questInvited",
        "x-api-user" : habId, 
        "x-api-key" : habToken
      }
    }
    var params = paramsTemplate; 
    var url = "https://habitica.com/api/v3/groups/" + partyId + "/quests/accept"; 
    UrlFetchApp.fetch(url, params);
  }
 
  return HtmlService.createHtmlOutput("Hey! Webhook request received: " + JSON.stringify(e));
}
